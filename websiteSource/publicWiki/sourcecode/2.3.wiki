%title Chapter2 Question3 

<h1 class="justcenter"> Chapter2 Question3 </h1>

= Question =

Implement an algorithm to delete a node in the middle of a single linked list, given only access to that node.

EXAMPLE

Input: the node c from the linked list a->b->c->d->e
Result: nothing is returened, but the new linked list looks like a->b->d->e

= Analysis =

Two pointers. one increase 1 per step, other increase two per step.

Time Complexity `O(N)` Space `O(1)`.

= Source Code =


{{{class="brush: java"
package chapter2;

public class Question3 {
    static void removeMiddle( LinkedListNode head ){
        LinkedListNode firstPointer = head;
        LinkedListNode secondPointer = head;
        LinkedListNode previous = head;
        
        while(true){
            if( firstPointer.next == null || secondPointer.next == null){
                break;
            }
            secondPointer = secondPointer.next;
            if ( secondPointer.next == null){
                break;
            }
            secondPointer = secondPointer.next;
            previous = firstPointer;
            firstPointer = firstPointer.next;
        }
        if ( previous.next != null){
            previous.next = previous.next.next;
        }
    }
    public static void main(String[] args ){
        LinkedListNode linkedList = new LinkedListNode();
        linkedList.generator(3);
        linkedList.print();
        removeMiddle(linkedList);
        linkedList.print();
    }
}
}}}

= Formal Solution =


{{{class="brush: java"
package Question2_3;

import CtCILibrary.AssortedMethods;
import CtCILibrary.LinkedListNode;

public class Question {

        public static boolean deleteNode(LinkedListNode n) {
                if (n == null || n.next == null) {
                        return false; // Failure
                } 
                LinkedListNode next = n.next; 
                n.data = next.data; 
                n.next = next.next; 
                return true;
        }
        
        public static void main(String[] args) {
                LinkedListNode head = AssortedMethods.randomLinkedList(10, 0, 10);
                System.out.println(head.printForward());
                deleteNode(head.next.next.next.next); // delete node 4
                System.out.println(head.printForward());
        }

}
}}}

= Problem =

# always check `Null`
# The formal solution is that correct? The formal solution is a bullshit....

= Reference =

# [[https://github.com/gaylemcd/ctci/blob/master/java/Chapter%202/Question2_3/Question.java|Formal Solution]]

<h6 class="timestamp"> Created Time: 2014/01/24 14:55:09.      Last Modified Time:  . </h6>

