%title NoSQL 

<h1 class="justcenter"> NoSQL </h1>

= What is NoSQL =

NoSQL (not only SQL) is not a relational database management system (RDBMS). NoSQL is meant for Unstructured Big Data and Cloud Computing. A NoSQL database is exactly the type of database that can handle the all sort of unstructured, messy and unpredictable data that our system of engagement requires. 

= NoSQL VS RDBMS =

# The relational model takes data and separates it into many interrelated tables that contain rows and columns. While, NoSQL databases have a very different model.
# Relational technologies have rigid schemas while NoSQL models are schemaless.
# It also may not provide full ACID (atomicity, consistency, isolation, durability) guarantees, but still has a distributed and fault tolerant architecture.
# The NoSQL taxonomy supports key-value stores, document store, BigTable, and graph databases.

In a word, in NoSQL,document databases are schemaless, allowing you to freely add fields to JSON documents without having to first define changes. The format of the data being inserted can be changed at any time, without application disruption.

= Why NoSQL =

# NoSQL has Flexible Data Model to Capture Unstructured / Semi-structured Big Data
# NoSQL is highly and easily scalable
# NoSQL databases are built to allow the insertion of data without a predefined schema.
# Many NoSQL database technologies have excellent integrated caching capabilities, keeping frequently-used data in system memory as much as possible and removing the need for a separate caching layer that must be maintained.
# Most NoSQL databases also support automatic replication, meaning that you get high availability and disaster recovery without involving separate applications to manage these tasks. The storage environment is essentially virtualized from the developer's perspective.

= Types of NoSQL Databases =

== Key-Value stores ==

The main idea here is using a hash table where there is a unique key and a pointer to a particular item of data. The Key/Value model is the simplest and easiest to implement. But it is inefficient when you are only interested in querying or updating part of a value, among other disadvantages.

*Example*: Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB, Amazon SimpleDB, Riak

== Column Family Stores == 

These were created to store and process very large amounts of data distributed over many machines. There are still keys but they point to multiple columns. The columns are arranged by column family.

*Example*: Cassandra, HBase

== Document Databases == 

These were inspired by Lotus Notes and are similar to key-value stores. The model is basically versioned documents that are collections of other key-value collections. The semi-structured documents are stored in formats like JSON. Document databases are essentially the next level of Key/value, allowing nested values associated with each key.  Document databases support querying more efficiently.

*Example*: CouchDB, MongoDb

== Graph Databases == 

Instead of tables of rows and columns and the rigid structure of SQL, a flexible graph model is used which, again, can scale across multiple machines. NoSQL databases do not provide a high-level declarative query language like SQL to avoid overtime in processing. Rather, querying these databases is data-model specific. Many of the NoSQL platforms allow for RESTful interfaces to the data, while other offer query APIs.

*Example*: Neo4J, InfoGrid, Infinite Graph

= Challenges =

# Maturity: NoSQL advocates will argue that their advancing age is a sign of their obsolescence, but for most CIOs, the maturity of the RDBMS is reassuring.
# Support: Most of NoSQL Databases are open-source, but companies like to get timely and competent support when something happened.
# Administration: The design goals for NoSQL may be to provide a zero-admin solution, but the current reality falls well short of that goal. NoSQL today requires a lot of skill to install and a lot of effort to maintain.
# Expertise: Even a simple query requires significant programming expertise, and commonly used BI tools do not provide connectivity to NoSQL. It's far easier to find experienced RDBMS programmers or administrators than a NoSQL expert.

= Conclusion =

NoSQL databases are becoming an increasingly important part of the database landscape, and when used appropriately, can offer real benefits. However, enterprises should proceed with caution with full awareness of the legitimate limitations and issues that are associated with these databases.

= Reference =

# [[http://theprofessionalspoint.blogspot.in/2014/01/nosql-vs-rdbms-why-and-why-not-to-use.html|NoSQL vs RDBMS: Why and why not to use NoSQL over RDBMS?]] 
# [[http://theprofessionalspoint.blogspot.in/2014/01/types-and-examples-of-nosql-databases.html|Types and Examples of NoSQL Databases]]
# [[http://theprofessionalspoint.blogspot.in/2014/01/12-best-free-and-open-source-nosql.html|12 Best Free and Open Source NoSQL Databases]]

<h6 class="timestamp"> Created Time: 2014/02/03 09:19:59.      Last Modified Time:  . </h6>

